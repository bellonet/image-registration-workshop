digraph ImageRegistrationGuideline {
    rankdir=TB;
    nodesep=0.1;
    ranksep=0.1;
    node [shape=rectangle, style=rounded, fontsize=12, fontname="Helvetica"];
    
    size="9,9.7"; // Width=8 inches, Height=10 inches
    ratio=compress; // Adjust the ratio to fit the height

    // Start Node
    start [label="Start", shape=ellipse, style=filled, fillcolor=lightgreen];

    // Preprocessing Decision
    preprocessing_check [label="Is preprocessing needed?", shape=sqaure, style=filled, fillcolor=lightblue];

    // Preprocessing Steps
    preprocessing_steps [label="Correct Intensity, Resize, or Segment.."];

    // Deep Learning Decision
    deep_learning_check [label="Do you have the necessary expertise,\ncomputational resources,\nand perhaps training data for Deep Learning?", shape=sqaure, style=filled, fillcolor=lightblue];

    // Deep Learning Registration
    deep_learning_registration [label="Apply Deep Learning-Based Registration\n(e.g., VoxelMorph, DeepReg)", shape=ellipse, style=filled, fillcolor=lightgrey];

    // Step 1: Are the images very similar?
    similarity_check [label="Are the images very similar?\n(Minimal transformation)", shape=sqaure, style=filled, fillcolor=lightblue];

    // Paths from similarity_check
    intensity_based [label="Use Intensity-Based Registration\n(e.g., Cross-Correlation)"];
    mutual_information [label="Use Histogram-Based Registration\n(e.g., Mutual Information)"];
    feature_based [label="Use Feature-Based Methods"];
    retake_images [label="Retake Images with Extrinsic Landmarks\nor Improved Features", shape=ellipse, style=filled, fillcolor=lightgrey];

    // Transformation Type Decision
    transformation_type [label="Select Transformation Type", shape=sqaure, style=filled, fillcolor=lightblue];

    // Local Deformations Decision
    local_deformations [label="Are local deformations present?", shape=sqaure, style=filled, fillcolor=lightblue];

    // Transformation Methods
    rigid_transformation [label="Calculate and Apply Rigid, Affine, or Perspective Transformation"];
    elastic_transformation [label="Calculate and Apply Elastic Transformation\n(e.g., B-Splines, Thin-Plate Splines)"];

    // Final Step
    final_step [label="Apply Same Transformation to Additional Images\nfrom Source Space", shape=ellipse, style=filled, fillcolor=lightgrey];

    // Linking Start to Preprocessing Check
    start -> preprocessing_check;

    // Branching from Preprocessing Check
    preprocessing_check -> preprocessing_steps [label="Yes"];
    preprocessing_check -> deep_learning_check [label="No"];

    // Linking Preprocessing Steps to Deep Learning Check
    preprocessing_steps -> deep_learning_check;

    // Branching from Deep Learning Check
    deep_learning_check -> deep_learning_registration [label="Yes"];
    deep_learning_check -> similarity_check [label="No"];

    // Deep Learning Registration is now an endpoint
    // deep_learning_registration -> final_step; // Removed as per instructions

    // Branching from Similarity Check
    similarity_check -> intensity_based [label="Yes"];
    similarity_check -> mutual_information [label="Yes/Somehow"];
    similarity_check -> feature_based [label="Yes/Somehow/No"];
    similarity_check -> retake_images [label="Not at all"];

    // Linking Registration Methods to Transformation Type
    intensity_based -> transformation_type;
    mutual_information -> transformation_type;

    // Split Feature-Based Methods
    feature_based -> classic_feature_based [label="Image Features"];
    classic_feature_based [label="Classic Feature-Based Methods\n(e.g., SIFT, ORB, SURF)"];
    classic_feature_based -> transformation_type;
    
    feature_based -> pose_estimation_based [label="Model Based"];
    pose_estimation_based [label="Model-Based Feature Detection\n(e.g., Pose Estimation via DeepLabCut)"];
    pose_estimation_based -> transformation_type;
    
    // Decision on Transformation Type
    transformation_type -> rigid_transformation [label="Global Deformations"];

    // Linking to Local Deformations Check
    rigid_transformation -> local_deformations;

    // Decision on Local Deformations
    local_deformations -> elastic_transformation [label="Yes"];
    local_deformations -> final_step [label="No"];

    // Elastic Transformation leads to Final Step
    elastic_transformation -> final_step;

    // Final Step from Rigid Transformation if No Elastic Needed
    rigid_transformation -> final_step [style=invis]; // Invisible edge to maintain graph structure

    // Retake Images is an endpoint
    retake_images -> final_step [style=invis]; // Invisible edge to maintain graph structure

    // Styling for Clarity
    edge [fontsize=12, fontname="Helvetica"];
    node [fontsize=12, fontname="Helvetica"];
}
